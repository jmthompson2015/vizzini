package org.vizzini.illyriad.map;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.awt.Point;
import java.io.StringWriter;
import java.util.BitSet;
import java.util.Set;
import java.util.TreeSet;

import org.junit.Test;

/**
 * Provides tests for the <code>TerrainSpecificEnumGenerator</code> class.
 */
public final class TerrainSpecificEnumGeneratorTest
{
    /** Geo ID converter. */
    private final GeoIdConverter converter = new GeoIdConverter(true);

    /**
     * Test the <code>generate()</code> method.
     */
    @Test
    public void generate()
    {
        final StringWriter writer = new StringWriter();
        final TerrainSpecificEnumGenerator generator = new TerrainSpecificEnumGenerator();

        generator.generate(writer);

        final String expected = "\n/** Terrain specific. */\nABANDONED_CAMPSITE(156, \"Abandoned Campsite\", false),\n\n/** Terrain specific. */\nABANDONED_LAIR(208, \"Abandoned Lair\"),\n\n/** Terrain specific. */\nABANDONED_LODGE(145, \"Abandoned Lodge\", false),\n\n/** Terrain specific. */\nABANDONED_MINESHAFT(42, \"Abandoned Mineshaft\", false),\n\n/** Terrain specific. */\nABUNDANT_CLAY(7, \"Abundant Clay\"),\n\n/** Terrain specific. */\nABUNDANT_CROPS(12, \"Abundant Crops\"),\n\n/** Terrain specific. */\nABUNDANT_QUARRY(46, \"Abundant Quarry\"),\n\n/** Terrain specific. */\nACTIVATED_STANDING_STONES(171, \"Activated Standing Stones\"),\n\n/** Terrain specific. */\nACTIVE_PEAK(203, \"Active Peak\"),\n\n/** Terrain specific. */\nALLUVIAL_PLAIN(16, \"Alluvial Plain\"),\n\n/** Terrain specific. */\nALTAR_OF_AIR(169, \"Altar of Air\"),\n\n/** Terrain specific. */\nALTAR_OF_EARTH(170, \"Altar of Earth\"),\n\n/** Terrain specific. */\nALTAR_OF_FIRE(168, \"Altar of Fire\"),\n\n/** Terrain specific. */\nALTAR_OF_WATER(167, \"Altar of Water\"),\n\n/** Terrain specific. */\nANCIENT_CLAWS(159, \"Ancient Claws\"),\n\n/** Terrain specific. */\nANCIENT_FOREST(44, \"Ancient Forest\", false),\n\n/** Terrain specific. */\nANCIENT_GRAVEYARD(209, \"Ancient Graveyard\"),\n\n/** Terrain specific. */\nANCIENT_LAIR(144, \"Ancient Lair\"),\n\n/** Terrain specific. */\nBANKSIDE(172, \"Bankside\", false),\n\n/** Terrain specific. */\nBARREN_WASTES(68, \"Barren Wastes\"),\n\n/** Terrain specific. */\nBARROW(41, \"Barrow\", false),\n\n/** Terrain specific. */\nBEACH(173, \"Beach\", false),\n\n/** Terrain specific. */\nBLEAK_MOUNTAINS(25, \"Bleak Mountains\"),\n\n/** Terrain specific. */\nBLESSED_OAK(139, \"Blessed Oak\"),\n\n/** Terrain specific. */\nBOG(91, \"Bog\"),\n\n/** Terrain specific. */\nBOUNTIFUL_LAND(13, \"Bountiful Land\"),\n\n/** Terrain specific. */\nBREWERY_OUTBUILDINGS(163, \"Brewery Outbuildings\"),\n\n/** Terrain specific. */\nBROKEN_TOWER(210, \"Broken Tower\"),\n\n/** Terrain specific. */\nCACTUS(101, \"Cactus\"),\n\n/** Terrain specific. */\nCAIRN(125, \"Cairn\"),\n\n/** Terrain specific. */\nCANYON(22, \"Canyon\"),\n\n/** Terrain specific. */\nCLAY_SEAM(Arrays.asList(new Integer[] {9, 65}), \"Clay Seam\"),\n\n/** Terrain specific. */\nCLEARING(31, \"Clearing\"),\n\n/** Terrain specific. */\nCLOCK_TOWER(132, \"Clock Tower\"),\n\n/** Terrain specific. */\nCOAST(175, \"Coast\"),\n\n/** Terrain specific. */\nCOLUMN(133, \"Column\"),\n\n/** Terrain specific. */\nCONIFEROUS_DENSE_FOREST(177, \"Coniferous Dense Forest\"),\n\n/** Terrain specific. */\nCONIFEROUS_FORESTED_HILLTOP(178, \"Coniferous Forested Hilltop\"),\n\n/** Terrain specific. */\nCONIFEROUS_LIGHT_WOODS(181, \"Coniferous Light Woods\"),\n\n/** Terrain specific. */\nCONIFEROUS_THICK_FOREST(176, \"Coniferous Thick Forest\"),\n\n/** Terrain specific. */\nCONIFEROUS_WOODED_GLADE(180, \"Coniferous Wooded Glade\"),\n\n/** Terrain specific. */\nCONIFEROUS_WOODED_LAND(179, \"Coniferous Wooded Land\"),\n\n/** Terrain specific. */\nCORRUPTED_LAND(166, \"Corrupted Land\"),\n\n/** Terrain specific. */\nCRAGGY_PEAKS(24, \"Craggy Peaks\"),\n\n/** Terrain specific. */\nCROOKED_HOUSE(152, \"Crooked House\", false),\n\n/** Terrain specific. */\nCRUMBLING_LIGHTHOUSE(218, \"Crumbling Lighthouse\"),\n\n/** Terrain specific. */\nCYLINDROCONICAL_VESSELS(164, \"Cylindroconical Vessels\"),\n\n/** Terrain specific. */\nDAMP_JUNGLE(111, \"Damp Jungle\"),\n\n/** Terrain specific. */\nDARK_FOREST(143, \"Dark Forest\"),\n\n/** Terrain specific. */\nDARK_TEMPLE(154, \"Dark Temple\"),\n\n/** Terrain specific. */\nDEAD_WATER(198, \"Dead Water\"),\n\n/** Terrain specific. */\nDEADVLEI_FOREST(196, \"Deadvlei Forest\"),\n\n/** Terrain specific. */\nDENSE_FOLIAGE(106, \"Dense Foliage\"),\n\n/** Terrain specific. */\nDENSE_FOREST(53, \"Dense Forest\"),\n\n/** Terrain specific. */\nDENSE_JUNGLE(112, \"Dense Jungle\"),\n\n/** Terrain specific. */\nDENSE_MONSOON_JUNGLE(113, \"Dense Monsoon Jungle\"),\n\n/** Terrain specific. */\nDENSE_RAINFOREST(118, \"Dense Rainforest\"),\n\n/** Terrain specific. */\nDENSE_TROPICAL_FOREST(107, \"Dense Tropical Forest\"),\n\n/** Terrain specific. */\nDESERTED_MONASTERY(153, \"Deserted Monastery\", false),\n\n/** Terrain specific. */\nDESERTED_WAYHOUSE(146, \"Deserted Wayhouse\", false),\n\n/** Terrain specific. */\nDOLMEN(45, \"Dolmen\", false),\n\n/** Terrain specific. */\nDORMANT_PORTAL(211, \"Dormant Portal\"),\n\n/** Terrain specific. */\nDRAGON_MONUMENT(134, \"Dragon Monument\"),\n\n/** Terrain specific. */\nDRUMLIN(80, \"Drumlin\"),\n\n/** Terrain specific. */\nDRY_TUNDRA(122, \"Dry tundra\"),\n\n/** Terrain specific. */\nDWARF_MONUMENT(137, \"Dwarf Monument\"),\n\n/** Terrain specific. */\nELF_MONUMENT(136, \"Elf Monument\"),\n\n/** Terrain specific. */\nEMERGING_MOUNTAINTOP(204, \"Emerging Mountaintop\"),\n\n/** Terrain specific. */\nEXPOSED_CLAY(8, \"Exposed Clay\"),\n\n/** Terrain specific. */\nFACTION_HUB(66, \"Faction Hub\"),\n\n/** Terrain specific. */\nFAERIE_RING(124, \"Faerie Ring\"),\n\n/** Terrain specific. */\nFALLEN_DWARFHOLD(212, \"Fallen Dwarfhold\"),\n\n/** Terrain specific. */\nFERRY_POST(221, \"Ferry Post\"),\n\n/** Terrain specific. */\nFERTILE_GROUND(17, \"Fertile Ground\"),\n\n/** Terrain specific. */\nFERTILE_ORCHARD(15, \"Fertile Orchard\"),\n\n/** Terrain specific. */\nFERTILE_PASTURE(14, \"Fertile Pasture\"),\n\n/** Terrain specific. */\nFIERY_MOUNTAIN(21, \"Fiery Mountain\"),\n\n/** Terrain specific. */\nFISHERMANS_HUT(219, \"Fisherman's Hut\"),\n\n/** Terrain specific. */\nFORBIDDEN(67, \"Forbidden\", false),\n\n/** Terrain specific. */\nFORESTED_HILLTOP(Arrays.asList(new Integer[] {4, 54}), \"Forested Hilltop\"),\n\n/** Terrain specific. */\nFORGOTTEN_TEMPLE(149, \"Forgotten Temple\"),\n\n/** Terrain specific. */\nFORTIFIED_HOSTEL(213, \"Fortified Hostel\"),\n\n/** Terrain specific. */\nFORTRESS_OF_SHADOWS(158, \"Fortress of Shadows\"),\n\n/** Terrain specific. */\nFORTUNE_TELLER(157, \"Fortune Teller\"),\n\n/** Terrain specific. */\nFRESH_WATER(59, \"Fresh Water\"),\n\n/** Terrain specific. */\nFROSTY_HEATH(86, \"Frosty Heath\"),\n\n/** Terrain specific. */\nFROZEN_GROUND(70, \"Frozen Ground\"),\n\n/** Terrain specific. */\nGATHERING_PLACE(160, \"Gathering Place\"),\n\n/** Terrain specific. */\nGEYSER(123, \"Geyser\"),\n\n/** Terrain specific. */\nGLACIAL_CREVASSE(74, \"Glacial Crevasse\"),\n\n/** Terrain specific. */\nGLACIER(69, \"Glacier\"),\n\n/** Terrain specific. */\nGLASSY_CRAG(200, \"Glassy Crag\"),\n\n/** Terrain specific. */\nGLASSY_MOUNTAIN(205, \"Glassy Mountain\"),\n\n/** Terrain specific. */\nGYPSY_CAMPSITE(155, \"Gypsy Campsite\"),\n\n/** Terrain specific. */\nHAMADA_STONE_PLATEAU(99, \"Hamada (Stone Plateau)\"),\n\n/** Terrain specific. */\nHEAD_STATUE(222, \"Head Statue\"),\n\n/** Terrain specific. */\nHEAVY_CLAY_SEAM(11, \"Heavy Clay Seam\"),\n\n/** Terrain specific. */\nHEROIC_HUMAN_STATUE(135, \"Heroic Human Statue\"),\n\n/** Terrain specific. */\nHIDDEN_TEMPLE(150, \"Hidden Temple\"),\n\n/** Terrain specific. */\nHOUSE_OF_THE_SPIRITS(148, \"House of the Spirits\", false),\n\n/** Terrain specific. */\nICE_HOLES(82, \"Ice Holes\"),\n\n/** Terrain specific. */\nICE_CAVE(75, \"Ice cave\", false),\n\n/** Terrain specific. */\nICEFIELD(73, \"Icefield\"),\n\n/** Terrain specific. */\nICY_MOSS(85, \"Icy Moss\"),\n\n/** Terrain specific. */\nJUNGLE(110, \"Jungle\"),\n\n/** Terrain specific. */\nJUNGLE_STANDING_STONES(223, \"Jungle Standing Stones\"),\n\n/** Terrain specific. */\nKAME(79, \"Kame\"),\n\n/** Terrain specific. */\nLAKE(18, \"Lake\"),\n\n/** Terrain specific. */\nLANDSLIP(50, \"Landslip\"),\n\n/** Terrain specific. */\nLAVA_PEAK(202, \"Lava Peak\"),\n\n/** Terrain specific. */\nLAVA_POOL(206, \"Lava Pool\"),\n\n/** Terrain specific. */\nLAWSTONES(214, \"Lawstones\"),\n\n/** Terrain specific. */\nLICHEN(87, \"Lichen\"),\n\n/** Terrain specific. */\nLIGHT_RAINFOREST(115, \"Light Rainforest\"),\n\n/** Terrain specific. */\nLIGHT_TROPICAL_COVER(104, \"Light Tropical Cover\"),\n\n/** Terrain specific. */\nLIGHT_WOODS(Arrays.asList(new Integer[] {57, 63}), \"Light Woods\"),\n\n/** Terrain specific. */\nLIGHTHOUSE(126, \"Lighthouse\"),\n\n/** Terrain specific. */\nLOCH(19, \"Loch\"),\n\n/** Terrain specific. */\nLONELY_PEAKS(26, \"Lonely Peaks\"),\n\n/** Terrain specific. */\nMAGMA_RIFT(207, \"Magma Rift\"),\n\n/** Terrain specific. */\nMARSH(90, \"Marsh\"),\n\n/** Terrain specific. */\nMAUSOLEUM(142, \"Mausoleum\"),\n\n/** Terrain specific. */\nMESA(97, \"Mesa\"),\n\n/** Terrain specific. */\nMIRE(92, \"Mire\"),\n\n/** Terrain specific. */\nMONSOON_HILLTOP(114, \"Monsoon Hilltop\"),\n\n/** Terrain specific. */\nMONSOON_JUNGLE(109, \"Monsoon Jungle\"),\n\n/** Terrain specific. */\nMOOR(34, \"Moor\"),\n\n/** Terrain specific. */\nMORAINE(78, \"Moraine\"),\n\n/** Terrain specific. */\nMOUNTAIN_CAVE(128, \"Mountain Cave\"),\n\n/** Terrain specific. */\nMOUNTAINS(29, \"Mountains\"),\n\n/** Terrain specific. */\nMYSTIC_TOMB(165, \"Mystic Tomb\"),\n\n/** Terrain specific. */\nNUNATAK(71, \"Nunatak\"),\n\n/** Terrain specific. */\nOASIS(94, \"Oasis\"),\n\n/** Terrain specific. */\nOBELISK(131, \"Obelisk\"),\n\n/** Terrain specific. */\nOBSIDIAN_MOUNTAIN(199, \"Obsidian Mountain\"),\n\n/** Terrain specific. */\nOCEAN(62, \"Ocean\"),\n\n/** Terrain specific. */\nOPEN_PLAINS(33, \"Open Plains\"),\n\n/** Terrain specific. */\nORC_MONUMENT(138, \"Orc Monument\"),\n\n/** Terrain specific. */\nORNAMENTAL_GARDENS(Arrays.asList(new Integer[] {140, 141}), \"Ornamental Gardens\"),\n\n/** Terrain specific. */\nPALM_TREES(105, \"Palm Trees\"),\n\n/** Terrain specific. */\nPARCHED_BONES(197, \"Parched Bones\"),\n\n/** Terrain specific. */\nPERMAFROST(84, \"Permafrost\"),\n\n/** Terrain specific. */\nPETRIFIED_FOREST(Arrays.asList(new Integer[] {88, 195}), \"Petrified Forest\", false),\n\n/** Terrain specific. */\nPLACE_OF_HIGH_SACRIFICE(151, \"Place of High Sacrifice\"),\n\n/** Terrain specific. */\nPLAINS(Arrays.asList(new Integer[] {1, 2, 3, 5, 35, 36, 37, 38, 39, 58}), \"Plains\"),\n\n/** Terrain specific. */\nPLAYA(95, \"Playa\"),\n\n/** Terrain specific. */\nPYRAMIDS(129, \"Pyramids\", false),\n\n/** Terrain specific. */\nRAINFOREST(117, \"Rainforest\"),\n\n/** Terrain specific. */\nRAINFOREST_CANOPY(116, \"Rainforest Canopy\"),\n\n/** Terrain specific. */\nRAINFOREST_HILLTOP(120, \"Rainforest Hilltop\"),\n\n/** Terrain specific. */\nREG_GRAVEL_PLAIN(100, \"Reg (Gravel Plain)\"),\n\n/** Terrain specific. */\nRICH_CLAY_SEAM(6, \"Rich Clay Seam\"),\n\n/** Terrain specific. */\nRICH_QUARRY(47, \"Rich Quarry\"),\n\n/** Terrain specific. */\nROCHE_MOUTONNEE(81, \"Roche Moutonnee\"),\n\n/** Terrain specific. */\nROCKHEWN_MONASTERY(147, \"Rockhewn Monastery\"),\n\n/** Terrain specific. */\nROCKY_MOUNTAIN(98, \"Rocky Mountain\"),\n\n/** Terrain specific. */\nROCKY_OUTCROP(Arrays.asList(new Integer[] {49, 64}), \"Rocky Outcrop\"),\n\n/** Terrain specific. */\nROGEN_MORAINE(77, \"Rogen Moraine\"),\n\n/** Terrain specific. */\nRUINED_TOWER(43, \"Ruined Tower\", false),\n\n/** Terrain specific. */\nSACRIFICIAL_ALTAR(215, \"Sacrificial Altar\"),\n\n/** Terrain specific. */\nSAND_DUNE(93, \"Sand Dune\"),\n\n/** Terrain specific. */\nSCORCHED_FOREST(194, \"Scorched Forest\"),\n\n/** Terrain specific. */\nSCOURED_BEDROCK(72, \"Scoured Bedrock\"),\n\n/** Terrain specific. */\nSCRUBLAND(Arrays.asList(new Integer[] {30, 83}), \"Scrubland\"),\n\n/** Terrain specific. */\nSEAHENGE(220, \"Seahenge\"),\n\n/** Terrain specific. */\nSHALLOW_COASTLINE(174, \"Shallow Coastline\"),\n\n/** Terrain specific. */\nSHALLOW_SALT_WATER(61, \"Shallow Salt Water\"),\n\n/** Terrain specific. */\nSHARP_CRAGS(27, \"Sharp Crags\"),\n\n/** Terrain specific. */\nSHATTERED_HEAD(224, \"Shattered Head\"),\n\n/** Terrain specific. */\nSHIPWRECK(Arrays.asList(new Integer[] {225, 226, 227, 228, 229}), \"Shipwreck\"),\n\n/** Terrain specific. */\nSNOWY_DENSE_FOREST(183, \"Snowy Dense Forest\"),\n\n/** Terrain specific. */\nSNOWY_FORESTED_HILLTOP(184, \"Snowy Forested Hilltop\"),\n\n/** Terrain specific. */\nSNOWY_LIGHT_WOODS(187, \"Snowy Light Woods\"),\n\n/** Terrain specific. */\nSNOWY_THICK_FOREST(182, \"Snowy Thick Forest\"),\n\n/** Terrain specific. */\nSNOWY_WOODED_GLADE(186, \"Snowy Wooded Glade\"),\n\n/** Terrain specific. */\nSNOWY_WOODED_LAND(185, \"Snowy Wooded Land\"),\n\n/** Terrain specific. */\nSPHINX(130, \"Sphinx\"),\n\n/** Terrain specific. */\nSTANDING_STONES(40, \"Standing Stones\", false),\n\n/** Terrain specific. */\nSTEAMTASTIC_BREWERY(162, \"Steamtastic Brewery\"),\n\n/** Terrain specific. */\nSTONE_CIRCLE(127, \"Stone Circle\"),\n\n/** Terrain specific. */\nSTONY_GROUND(51, \"Stony Ground\"),\n\n/** Terrain specific. */\nSUCCULENTS(121, \"Succulents\"),\n\n/** Terrain specific. */\nSWAMP(89, \"Swamp\"),\n\n/** Terrain specific. */\nSWAMPLAND(23, \"Swampland\"),\n\n/** Terrain specific. */\nTARN(76, \"Tarn\"),\n\n/** Terrain specific. */\nTEMPERATE_DENSE_FOREST(189, \"Temperate Dense Forest\"),\n\n/** Terrain specific. */\nTEMPERATE_FORESTED_HILLTOP(190, \"Temperate Forested Hilltop\"),\n\n/** Terrain specific. */\nTEMPERATE_LIGHT_WOODS(193, \"Temperate Light Woods\"),\n\n/** Terrain specific. */\nTEMPERATE_THICK_FOREST(188, \"Temperate Thick Forest\"),\n\n/** Terrain specific. */\nTEMPERATE_WOODED_GLADE(192, \"Temperate Wooded Glade\"),\n\n/** Terrain specific. */\nTEMPERATE_WOODED_LAND(191, \"Temperate Wooded Land\"),\n\n/** Terrain specific. */\nTEMPLE_OF_REASON(161, \"Temple of Reason\"),\n\n/** Terrain specific. */\nTHICK_FOREST(52, \"Thick Forest\"),\n\n/** Terrain specific. */\nTHICK_RAINFOREST(119, \"Thick Rainforest\"),\n\n/** Terrain specific. */\nTIDAL_WATER(60, \"Tidal Water\"),\n\n/** Terrain specific. */\nTIKI_POLE(216, \"Tiki Pole\"),\n\n/** Terrain specific. */\nTREACHEROUS_MOUNTAINS(28, \"Treacherous Mountains\"),\n\n/** Terrain specific. */\nTROPICAL_FOLIAGE(103, \"Tropical Foliage\"),\n\n/** Terrain specific. */\nTROPICAL_HILLTOP(108, \"Tropical Hilltop\"),\n\n/** Terrain specific. */\nTUNDRA(32, \"Tundra\"),\n\n/** Terrain specific. */\nTURNED_CLAY(10, \"Turned Clay\"),\n\n/** Terrain specific. */\nVOLCANIC_MOUNTAIN(201, \"Volcanic Mountain\"),\n\n/** Terrain specific. */\nVOLCANIC_PEAK(20, \"Volcanic Peak\"),\n\n/** Terrain specific. */\nWADI(102, \"Wadi\"),\n\n/** Terrain specific. */\nWEEPING_WILLOW(217, \"Weeping Willow\"),\n\n/** Terrain specific. */\nWOODED_GLADE(56, \"Wooded Glade\"),\n\n/** Terrain specific. */\nWOODED_LAND(55, \"Wooded Land\"),\n\n/** Terrain specific. */\nWOODED_QUARRY(48, \"Wooded Quarry\"),\n\n/** Terrain specific. */\nYARDANG(96, \"Yardang\");\n";
        final String result = writer.toString();
        // System.out.println("expected =\n" + expected);
        // System.out.println("result   =\n" + result);

        assertThat(result, is(expected));
    }

    /**
     * Test the <code>getId()</code> method.
     */
    @Test
    public void printExamples()
    {
        final WorldMapDatabase worldMapDatabase = new FastWorldMapDatabase(converter);
        final TownDatabase townDatabase = new DefaultTownDatabase(converter);

        final TerrainCombat terrainCombat = TerrainCombat.BUILDINGS;
        BitSet squares = worldMapDatabase.getTerrainCombatSquares(terrainCombat);
        squares.andNot(worldMapDatabase.getTradeHubSquares());

        squares.andNot(townDatabase.getTownSquares());
        final TownTooCloseFilter filter = new TownTooCloseFilter(converter, townDatabase.getTownSquares(), 10);
        squares = filter.filter(squares);

        final Set<TerrainSpecific> found = new TreeSet<TerrainSpecific>();
        final String format = "%10d %5d/%-5d %s %s";

        for (int i = squares.nextSetBit(0); i >= 0; i = squares.nextSetBit(i + 1))
        {
            final TerrainSpecific terrainSpecific = worldMapDatabase.findTerrainSpecificFor(i);

            if (!found.contains(terrainSpecific))
            {
                if (terrainSpecific.isSettleable())
                {
                    final Point point = converter.indexToPoint(i);
                    System.out.println(String.format(format, i, point.x, point.y, terrainSpecific.getIds(),
                            terrainSpecific.getDisplayName()));
                }

                found.add(terrainSpecific);
                if (found.size() >= 30)
                {
                    break;
                }
            }
        }
    }
}
